function toArray(a){return[].slice.call(a)}function curry(a){var b=a.length,c=[];return function d(){return c=c.concat(toArray(arguments)),c.length>=b?a.apply(this,c.splice(0)):d}}const id=a=>a,compose=curry((a,b)=>b=>a(a(b))),map=curry((a,b)=>b.map(a)),chain=curry((a,b)=>b.chain(a)),Right=a=>({x:a,map:b=>Right(b(a)),chain:b=>b(a),fold:(b,c)=>c(a),inspect:()=>`Right(${a})`}),Left=a=>({x:a,map:b=>Left(a),chain:b=>b(a),fold:(b,c)=>b(a),inspect:()=>`Left(${a})`}),Either={};Either.of=(a=>null==a?Left(null):Right(a));const fromNullable=Either.of,Just=a=>({x:a,map:b=>Just(b(a)),chain:b=>b(a),inspect:()=>`Just(${a})`}),Nothing=a=>({x:a,map:b=>Nothing(a),chain:b=>b(a),inspect:()=>`Nothing(${a})`}),Maybe={};Maybe.of=(a=>null!=a?Just(a):Nothing(null));const IO=a=>({runIO:a,map:a=>map(a,runIO),inspect:()=>`IO(${runIO})`});IO.of=(a=>IO(a)),module.exports={curry:curry,chain:chain,id:id,compose:compose,map:map,Either:Either,Right:Right,Left:Left,Maybe:Maybe,Just:Just,Nothing:Nothing,IO:IO};