function toArray(a){return[].slice.call(a)}function curry(a){var b=a.length,c=[];return function d(){return c=c.concat(toArray(arguments)),c.length>=b?a.apply(this,c.splice(0)):d}}const first=a=>a[0],rest=([a,...b])=>b,reduce=(a,b,c)=>0===c.length?b:reduce(a,a(b,first(c)),rest(c)),sum=a=>reduce((b,c)=>c+b,0,a),reverse=a=>reduce((b,c)=>[c].concat(b),[],a),filter=curry((a,b)=>reduce((c,d)=>a(d)?c.concat(d):c,[],b)),all=curry((a,b)=>reduce((c,d)=>!!(a(d)&c),!0,b)),any=curry((a,b)=>reduce((c,d)=>!!a(d)||c,!1,b)),size=a=>reduce(b=>1+b,0,a),max=a=>reduce((b,c)=>c>b?c:b,0,a),min=a=>reduce((b,c)=>c<b?c:b,Infinity,a),id=a=>a,compose=curry(a=>c=>a(a(c))),map=curry((a,b)=>b.map(a)),chain=curry((a,b)=>b.chain(a)),Right=a=>({x:a,map:b=>Right(b(a)),chain:b=>b(a),fold:(b,c)=>c(a),inspect:()=>`Right(${a})`}),Left=a=>({x:a,map:()=>Left(a),chain:b=>b(a),fold:b=>b(a),inspect:()=>`Left(${a})`}),Either={};Either.of=a=>null==a?Left(null):Right(a);const fromNullable=Either.of,Just=a=>({x:a,map:b=>Just(b(a)),chain:b=>b(a),inspect:()=>`Just(${a})`}),Nothing=a=>({x:a,map:()=>Nothing(a),chain:b=>b(a),inspect:()=>`Nothing(${a})`}),Maybe={};Maybe.of=a=>null==a?Nothing(null):Just(a);const IO=a=>({runIO:a,map:b=>map(b,runIO),inspect:()=>`IO(${runIO})`});IO.of=a=>IO(a),module.exports={first,rest,reduce,sum,reverse,map,filter,all,any,size,max,min,curry,chain,id,compose,map,Either,Right,Left,Maybe,Just,Nothing,IO};